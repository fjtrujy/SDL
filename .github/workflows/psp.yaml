name: Build (Sony Playstation Portable)

on: [push, pull_request]

jobs:
  psp:
    runs-on: ubuntu-latest
    container: pspdev/pspdev:latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup dependencies
      run: |
        apk update 
        apk add cmake gmp mpc1 mpfr4 make pkgconf
    - name: Configure CMake
      run: |
        cmake -S . -B build \
          -DCMAKE_TOOLCHAIN_FILE=$PSPDEV/psp/share/pspdev.cmake \
          -DSDL_TESTS=ON \
          -DSDL_INSTALL_TESTS=ON \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=prefix
    - name: Build
      run: cmake --build build --config Release
    
    - name: Get short SHA
      id: slug
      run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"
    - name: Upload test artifacts
      if: ${{ success() }}
      uses: actions/upload-artifact@v3
      with:
        name: tests-${{ steps.slug.outputs.sha8 }}
        path: |
          build/test

    - name: Install
      run: |
        echo "SDL2_DIR=$(pwd)/prefix" >> $GITHUB_ENV
        cmake --install build --config Release
        ( cd prefix; find ) | LC_ALL=C sort -u
    - name: Verify CMake configuration files
      run: |
        cmake -S cmake/test -B cmake_config_build \
          -DCMAKE_TOOLCHAIN_FILE=$PSPDEV/psp/share/pspdev.cmake \
          -DCMAKE_PREFIX_PATH=${{ env.SDL2_DIR }} \
          -DTEST_SHARED=FALSE \
          -DCMAKE_BUILD_TYPE=Release
        cmake --build cmake_config_build --verbose
    - name: Verify sdl2-config
      run: |
        export CC=psp-gcc
        export PATH=${{ env.SDL2_DIR }}/bin:$PATH
        export EXTRA_LDFLAGS="-L$PSPDEV/lib -L$PSPDEV/psp/lib -L$PSPDEV/psp/sdk/lib"
        cmake/test/test_sdlconfig.sh
    - name: Verify sdl2.pc
      run: |
        export CC=psp-gcc
        export PKG_CONFIG_PATH=${{ env.SDL2_DIR }}/lib/pkgconfig
        export EXTRA_LDFLAGS="-L$PSPDEV/lib -L$PSPDEV/psp/lib -L$PSPDEV/psp/sdk/lib"
        cmake/test/test_pkgconfig.sh

  execute:
    needs: [psp]
    runs-on: ubuntu-latest
    container: ghcr.io/hrydgard/ppsspp:latest

    steps:
    - name: Get short SHA
      id: slug
      run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"

    - name: Download artifact
      uses: actions/download-artifact@v1
      with:
        name: tests-${{ steps.slug.outputs.sha8 }}
    
    - name: Execute Automation tests
      run: |
        PPSSPPHeadless tests-${{ steps.slug.outputs.sha8 }}/sdl-testautomation/EBOOT.PBP --log

    - name: Upload SDL Log
      if: ${{ success() }}
      uses: actions/upload-artifact@v3
      with:
        name: tests-${{ steps.slug.outputs.sha8 }}
        path: |
          tests-${{ steps.slug.outputs.sha8 }}/sdl-testautomation/SDL_Log.txt